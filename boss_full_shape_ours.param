#------Experiments to test (separated with commas)-----

data.experiments=['full_shape_spectra', '<<<cmb_prior>>>', ]

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

data.over_sampling=[1, 3]

### Cosmological parameters list
data.parameters['omega_b']      = [ 0.0223676892205, 0.020, 0.025,  0.0003, 1, 'cosmo']
data.parameters['omega_cdm']      = [ 0.1202744738425, 0.10, 0.14,  0.003,  1, 'cosmo']

# TODO deal with theta_MC
data.parameters['h']      = [ 0.6524865269291,  0.6,  0.72,  0.02, 1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [  3.0446331579528,  2.9, 3.2, 0.03,  1, 'cosmo']
data.parameters['n_s']      = [ 0.9644479187402,  0.93, 1.0,  0.01, 1, 'cosmo']

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
# data.cosmo_arguments['N_ur'] = 2.0328
# data.cosmo_arguments['N_ncdm'] = 1
# data.cosmo_arguments['m_ncdm'] = 0.06
# data.cosmo_arguments['T_ncdm'] = 0.71611

# Alternatively, we can use three degenerate massive neutrinos
data.parameters['M_tot'] = [ 0.1, 0.0, 0.6, 0.1, 1, 'cosmo' ]
data.cosmo_arguments['N_ur'] = 0.00441
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['deg_ncdm'] = 3
# data.cosmo_arguments['T_ncdm'] = 0.71611


### Primordial non-Gaussianity (remember to turn on the 'PNG' switch below if using these)
data.parameters['f^{eq}_{NL}']         = [ 0,    None,  None,   0,     1,'nuisance']
data.parameters['f^{orth}_{NL}']         = [ 0,    None,  None,   0,     1,'nuisance']

# Nuisance parameter list, same call, except the name does not have to be a class name

### Sound horizon rescaling
data.parameters['alpha_{r_s}'] = [ 1.0,   None, None,  0.0, 1, 'nuisance']

### Nuisance parameters for BOSS Pk/Q0/Bk/AP data
# Nuisance parameters for first data chunk
data.parameters['b^{(1)}_1']         = [ 1.99,    1.,  4.,     0.1,     1,'nuisance']
data.parameters['b^{(1)}_2']         = [ 0.24,    None,  None,     0.5,     1,'nuisance']
data.parameters['b^{(1)}_{G_2}']         = [ -0.27,    None,  None,     0.5,     1,'nuisance']

# Nuisance parameters for second data chunk
# data.parameters['b^{(2)}_1']         = [  2.0698,    1.,  4.,     0.1,     1,'nuisance']
# data.parameters['b^{(2)}_2']         = [ -1.7563,    None,  None,     0.5,     1,'nuisance']
# data.parameters['b^{(2)}_{G_2}']         = [  1.9468e-01,    None,  None,     0.5,     1,'nuisance']

# Nuisance parameters for third data chunk
# data.parameters['b^{(3)}_1']         = [ 1.8682,    1.,  4.,     0.1,     1,'nuisance']
# data.parameters['b^{(3)}_2']         = [ -2.1708,   None,  None,     0.5,     1,'nuisance']
# data.parameters['b^{(3)}_{G_2}']         = [ -9.1663e-02,    None,  None,     0.5,     1,'nuisance'] 

# Nuisance parameters for fourth data chunk
# data.parameters['b^{(4)}_1']         = [  1.8797,    1.,  4.,     0.1,     1,'nuisance']
# data.parameters['b^{(4)}_2']         = [ -3.2115,    None,  None,     0.5,     1,'nuisance']
# data.parameters['b^{(4)}_{G_2}']         = [ 7.5104e-01,    None,  None,    0.5,     1,'nuisance']

# Derived parameters

# data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
# data.parameters['Omega_m']    = [1, None, None, 0,     1,   'derived']
# data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
# data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
# data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
# data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

# data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05
data.cosmo_arguments['output'] = 'mPk'
# data.cosmo_arguments['z_reio'] = 10.
data.cosmo_arguments['tau_reio'] = 0.05
data.cosmo_arguments['P_k_max_h/Mpc'] = 100.
data.cosmo_arguments['YHe'] = 0.2454
data.cosmo_arguments['non linear'] = 'PT'
data.cosmo_arguments['FFTLog mode'] = 'FAST'
# data.cosmo_arguments['FFTLog mode'] = 'Normal'
data.cosmo_arguments['IR resummation'] = ' Yes '
data.cosmo_arguments['Bias tracers'] = ' Yes '
data.cosmo_arguments['RSD'] = ' Yes '
# array of sample redshifts
data.cosmo_arguments['z_pk'] = '0.61'
data.cosmo_arguments['AP'] = ' Yes '
# Whether to include PNG?
data.cosmo_arguments['PNG'] = 'No'
data.cosmo_arguments['Omfid'] = 0.31

# These two are required to get sigma8 as a derived parameter 
# (class must compute the P(k) until sufficient k)
# data.cosmo_arguments['output'] = 'mPk'
# data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

#------ Mcmc parameters ----

data.N=10
data.write_step=5

#------ Likelihood parameters ----
# Here we choose which datasets to use (P0/P2/P4, Q0, B0, AP)
full_shape_spectra.use_P = True
full_shape_spectra.use_Q = False
full_shape_spectra.use_B = False
full_shape_spectra.use_AP = <<<have_AP>>>
full_shape_spectra.lmax = <<<ellmax>>>

# TODO LFT experimental prior rescaling
full_shape_spectra.prior_rescale = <<<prior_rescale>>>

## Sample parameters

# Redshift and number of redshift slices to use (up to len(z))
full_shape_spectra.z = [0.61, ]
full_shape_spectra.nz = 1

# Approximate 1/nbar of survey
full_shape_spectra.inv_nbar = [5000., ]

# Measurements
full_shape_spectra.data_directory = '/home/lthiele/full_shape_likelihoods' # TODO data.path['data']
full_shape_spectra.P_measurements = ['data/boss_pk_ngc_z3.dat', ]
full_shape_spectra.AP_measurements = ['data/boss_alpha_ngc_z3.dat',]
full_shape_spectra.B_measurements = ['data/boss_bk_ngc_z3.dat',]

# Joint covariance matrix
full_shape_spectra.covmat_file = ['data/boss_cov_ngc_z3.dat',]

# Fiducial coordinates
full_shape_spectra.h_fid = 0.676
full_shape_spectra.DA_fid = [1486.9604106889594,]
full_shape_spectra.Hz_fid = [91.39727080913846,]

# AP fiducial parameters
full_shape_spectra.rdHfid = [0.046932401774762225,]
full_shape_spectra.rdDAfid = [0.1031183538734282,]

## Other power spectrum parameters
# include integration in k-bins
full_shape_spectra.bin_integration_P = True
# kmin for P_l(k) [for each z bin] default is kmin=0.01
full_shape_spectra.kminP = [<<<kmin>>>,]
# kmax for P_l(k) TODO
full_shape_spectra.kmaxP = [<<<kmax>>>,]
# kmax for Q0(k)
full_shape_spectra.kmaxQ = [0.40,] 
# whether to remove wiggles from linear power spectra
full_shape_spectra.no_wiggle = False

## Other bispectrum parameters
full_shape_spectra.discreteness_weights_file = ['data/boss_bk_weights_ngc_z3.dat',]
# kmin for B0
full_shape_spectra.kminB = [0.015,]
# kmax for B0
full_shape_spectra.kmaxB = [0.075,]
# width of B0 k bins
full_shape_spectra.dkB = [0.01,]
# Number of radial integration bins
full_shape_spectra.n_gauss = 1
# Number of angular integration bins
full_shape_spectra.n_gauss2 = 3
# whether to include the one-loop bispectrum
full_shape_spectra.oneloop_B = False
# HDF5 file containing one-loop bispectrum shapes (NB: for PTChallenge dataset here!)
full_shape_spectra.oneloop_shapes = "/projects/QUIJOTE/Oliver/ptc_rsd_HR.h5"
# Fiducial sigma8 used to compute one-loop shapes
full_shape_spectra.sigma8_fid = 0.8
